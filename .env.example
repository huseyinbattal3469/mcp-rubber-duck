
# Example .env file for MCP Rubber Duck
# Original project by nesquikm, forked and extended by huseyinbattal3469
# This version adds multi-provider, multi-model, and agnostic adapter support

# --- OpenAI Provider ---
OPENAI_API_KEY=sk-...
OPENAI_BASE_URL=https://api.openai.com/v1
OPENAI_DEFAULT_MODEL=o4
OPENAI_MODELS=o4,3.5Turbo
OPENAI_NICKNAME="Duck Openai"

# --- OpenRouter Provider ---
OPENROUTER_API_KEY=or-...
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_DEFAULT_MODEL=moonshotai/kimi-k2:free
OPENROUTER_MODELS=moonshotai/kimi-k2:free,deepseek/deepseek-chat-v3.1:free
OPENROUTER_NICKNAME="Duck Openrouter"

# --- Custom Provider Example ---
CUSTOM_API_KEY=custom-...
CUSTOM_BASE_URL=https://api.customprovider.com/v1
CUSTOM_DEFAULT_MODEL=custom-model-1
CUSTOM_MODELS=custom-model-1,custom-model-2
CUSTOM_NICKNAME="Duck Custom Provider"
CUSTOM_PROVIDER_HEADER={"settings1":"settings","settings2":"settings_"}

# --- Global Settings ---
DEFAULT_PROVIDER=openrouter
DEFAULT_TEMPERATURE=0.7
LOG_LEVEL=info

# --- Usage Instructions ---
# Multi-Provider & Multi-Model Usage:
# 1. Define each provider and its models in ENV or config/config.json.
# 2. For each model, a duck is created: e.g.
#    - Duck Openai-o4
#    - Duck Openai-3.5Turbo
#    - Duck Openrouter-kimi-k2:free
#    - Duck Openrouter-deepseek-chat-v3.1:free
#    - Duck Custom Provider-custom-model-1
#    - Duck Custom Provider-custom-model-2
# 3. To use a specific duck/model, pass the provider and model name in your request:
#    Example (JavaScript):
#    const response = await manager.askDuck('openai', 'Hello!', { model: 'o4' });
#    const response2 = await manager.askDuck('openrouter', 'Hi!', { model: 'deepseek/deepseek-chat-v3.1:free' });
#    const response3 = await manager.askDuck('custom', 'Test!', { model: 'custom-model-2', headers: { settings1: 'settings', settings2: 'settings_' } });
# 4. Custom headers for providers can be set via ENV (see CUSTOM_PROVIDER_HEADER above) or config.json.
# 5. You can compare ducks or convene a duck council using the compare_ducks and duck_council tools, passing provider/model lists as needed.

# See README.md for full documentation and advanced usage.